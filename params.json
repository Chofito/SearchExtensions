{"name":"SearchExtensions","tagline":"Library of IQueryable and IEnumerable extension methods to perform searching","body":"SearchExtensions\r\n================\r\n\r\n###This project is avaliable for download as a nuget package at https://www.nuget.org/packages/NinjaNye.SearchExtensions/\r\n\r\nSearchExtensions is a library of IQueryable and IEnumerable extension methods to perform searching.  For more information on these methods, please visit my blog:\r\nhttp://jnye.co/posts/tagged/search\r\n\r\n> You can get in touch with me by adding a comment on my blog ([http://jnye.co](http://jnye.co)) or you can **follow me on twitter ([@ninjanye](https://twitter.com/ninjanye))**\r\n\r\n## [`NEW` Release 1.0](http://jnye.co/release1)\r\nThe changes made to the latest release of Search extensions are:  \r\n\r\n* Bump version to **Release 1.0**\r\n* Remove the previously marked `[Obsolete]` methods\r\n* Promote the fluent `Search` methods out of the fluent namespace\r\n* Remove the specific `SearchAll()` method in favour of utilising `.Search()`\r\n* Performance improvements\r\n* Minor code cleanup\r\n\r\n## [`NEW` Fluent Search API](http://jnye.co/fluent)\r\nAs of version 0.5, SearchExtensions has been upgraded to have a fluent API enabling a more control over your queries as well as making them easy to read and construct.\r\n\r\n## IQueryable Searching\r\nThe IQueryable extension methods build expression trees based on your command chain and then sends this request to the data provider when required.  This means that your data provider is restricting the records that are brought into memory instead of having all records brought into, and filtered, in memory.\r\n### Methods\r\nSearch methods available to IQueryable data are:\r\n\r\n* `Containing` - target property *contains* search term or terms\r\n* `IsEqual` - target property *equals* search term or terms\r\n* `StartsWith` - target property *starts with* search term or terms\r\n\r\n###How to: Performing `Containing` searches\r\n\r\nSearch for a **single search term** within a **single property**\r\n\r\n    var result = queryableData.Search(x => x.Property1)\r\n                              .Containing(\"searchTerm\");\r\n\r\nSearch for a **single search term** within **multiple properties**\r\n\r\n    var result = queryableData.Search(x => x.Property1, x => x.Property2, x.Property3)\r\n\t\t\t\t\t\t\t  .Containing(\"searchTerm\");\r\n\r\nSearch for **multiple search terms** within a **single property**\r\n\r\n    var result = queryableData.Search(x => x.Property1)\r\n\t\t\t\t\t\t\t  .Containing(\"search\", \"term\");\r\n\r\nSearch for **multiple search terms** within **multiple properties**\r\n\r\n    var result = queryableData.Search(x => x.Property1, x => x.Property2, x.Property3)\r\n\t\t\t\t\t\t\t  .Containing(\"searchTerm1\", \"searchTerm2\", \"searchTerm3\");\r\n\r\n###How to: Performing `Containing` AND searches\r\n\r\nSearch where a **single property** contains a **single search term**  \r\nAND a **another property** contains a **single search term**\r\n\r\n    var result = queryableData.Search(x => x.Property1)\r\n                              .Containing(\"searchTerm1\")\r\n                              .Search(x => x.Property1)\r\n                              .Containing(\"searchTerm2\");\r\n\r\nSearch where a **single search term** exists within in Property1 OR Property2  \r\nAND **single search term** exists within in Property3 OR Property4\r\n\r\n    var result = queryableData.Search(x => x.Property1, x => x.Property2)\r\n                              .Containing(\"searchTerm\")\r\n                              .Search(x => x.Property3, x => x.Property4)\r\n                              .Containing(\"searchTerm\");\r\n\r\nSearch where a **single search term** exists in Property1 OR Property2  \r\nAND any of the **multiple search terms** exist within a **single property**\r\n\r\n    var result = queryableData.Search(x => x.Property1, x => x.Property2)\r\n                              .Containing(\"searchTerm\")\r\n                              .Search(x => x.Property3)\r\n                              .Containing(\"another\", \"term\");\r\n\r\n###How to: Performing `IsEqual` searches\r\n\r\nSearch where a **single property** equals a **single search term**\r\n\r\n    var result = queryableData.Search(x => x.Property1)\r\n                              .IsEqual(\"searchTerm\");\r\n\r\nSearch where any one of **multiple properties** is equal to a **single search term**\r\n\r\n    var result = queryableData.Search(x => x.Property1, x => x.Property2, x.Property3)\r\n\t\t\t\t\t\t\t  .IsEqual(\"searchTerm\");\r\n\r\nSearch where a **single property** is equal to any one of **multiple search terms**\r\n\r\n    var result = queryableData.Search(x => x.Property1)\r\n                              .IsEqual(\"search\", \"term\");\r\n\r\nSearch where any one of **multiple properties** is equal to any one of **multiple search terms**\r\n\r\n    var result = queryableData.Search(x => x.Property1, x => x.Property2, x.Property3)\r\n\t\t\t\t\t\t\t  .IsEqual(\"searchTerm1\", \"searchTerm2\", \"searchTerm3\");\r\n\r\n###How to: Performing `StartsWith` searches\r\n\r\nSearch where a **single property** starts with a **single search term**\r\n\r\n    var result = queryableData.Search(x => x.Property1)\r\n                              .StartsWith(\"searchTerm\");\r\n\r\nSearch where any one of **multiple properties** starts with to a **single search term**\r\n\r\n    var result = queryableData.Search(x => x.Property1, x => x.Property2, x => x.Property3)\r\n\t\t\t\t\t\t\t  .StartsWith(\"searchTerm\");\r\n\r\nSearch where a **single property** starts with any one of **multiple search terms**\r\n\r\n    var result = queryableData.Search(x => x.Property1)\r\n                              .StartsWith(\"search\", \"term\");\r\n\r\nSearch where any one of **multiple properties** starts with any one of **multiple search terms**\r\n\r\n    var result = queryableData.Search(x => x.Property1, x => x.Property2, x.Property3)\r\n\t\t\t\t\t\t\t  .StartsWith(\"searchTerm1\", \"searchTerm2\", \"searchTerm3\");\r\n\r\n\r\n###How to: Combining instructions\r\nWith the latest version of SearchExtensions you can also combine search actions. For instance\r\n\r\nSearch where a **single property** `starts with` a **single search term** AND `containing` a **single search term**\r\n\r\n    var result = queryableData.Search(x => x.Property1)\r\n\t\t\t\t\t\t\t  .StartsWith(\"abc\")\r\n\t\t\t\t\t\t\t  .Containing(\"mno\");\r\n\r\nThe ability to pass **multiple search terms** to any of the action methods still remains:\r\n\r\n    var result = queryableData.Search(x => x.Property1, x => x.Property2)\r\n\t\t\t\t\t\t\t  .StartsWith(\"abc\", \"ninja\")       // that starts with \"abc\" OR \"ninja\"\r\n\t\t\t\t\t\t\t  .Containing(\"xyz\", \"extensions\")  // and contains \"mno\" OR \"search\"\r\n\r\n##IEnumerable (in memory) Searches\r\n\r\nSearchExtensions has also been extended to support `IEnumerable` collections.\r\n\r\nThis means you can now perform all of the above searches on in memory collections should you need to.\r\n\r\n### Methods\r\nCurrently `IEnumerable` searching has more features available to it than `IQueryable`, namely `EndsWith` and 'SetCulture'\r\n\r\n* `SetCulture` - Sets the string comparison culture with which to perform searches\r\n* `Containing` - target property *contains* search term or terms\r\n* `IsEqual` - target property *equals* search term or terms\r\n* `StartsWith` - target property *starts with* search term or terms\r\n* `EndsWith` - target property *ends with* search term or terms\r\n\r\nThe important thing to remember when performing an in memory search is to set the culture to the type of string comparison you wish to perform. **If `SetCulture` is not specified, `StringComparison.CurrentCulture` is used.**\r\n\r\n###How to: Performing IEnumerable searches\r\n\r\nThese methods are identical to that of the `IQueryable` methods.\r\n\r\n    var result = enumerableData.Search(x => x.Property1)\r\n\t\t\t\t\t\t\t   .SetCulture(StringComparison.OrdinalIgnoreCase) // Set culture for comparison\r\n\t\t\t\t\t\t\t   .StartsWith(\"abc\")\r\n\t\t\t\t\t\t\t   .EndsWith(\"xyz\")\r\n\t\t\t\t\t\t\t   .Containing(\"mno\");\r\n\r\nIt is also possible to switch the `StringComparison` culture context multiple times\r\n\r\n    var result = enumerableData.Search(x => x.Property1)\r\n\t\t\t\t\t\t\t   .SetCulture(StringComparison.OrdinalIgnoreCase)\r\n\t\t\t\t\t\t\t   .StartsWith(\"abc\")  // Uses OrdinalIgnoreCase\r\n\t\t\t\t\t\t\t   .SetCulture(StringComparison.Ordinal)\r\n\t\t\t\t\t\t\t   .EndsWith(\"xyz\")    // Uses Ordinal\r\n\t\t\t\t\t\t\t   .SetCulture(StringComparison.CurrentCulture)\r\n\t\t\t\t\t\t\t   .Containing(\"mno\"); //Uses CurrentCulture\r\n\r\n\r\n## [Ranked Searches](http://jnye.co/Posts/2031/searchextensions-ranked-searches-now-supported-by-the-fluent-api)\r\n\r\nAnother feature of the fluent api across both `IQueryable` and `IEnumerable` collections is the `ToRanked()` method.  \r\n\r\nAs well as returning the matched items, a Ranked Search also returns a hit count for each item in the form of an IRanked<T> result.  This enables you to order by hit count to retrieve the most relevant search results.\r\n\r\n###`IRanked<T>` result\r\n\r\nAn IRanked<T> result is simply defined as follows:\r\n\r\n    public interface IRanked<out T>\r\n    {\r\n        int Hits { get; }\r\n        T Item { get; }\r\n    }\r\n\r\nThis is returned using the `ToRanked()` method:\r\n\r\nRankedSearch for a **single search term** within a **single property**\r\n\r\n    var result = queryableData.Search(x => x.Property1)\r\n                              .Containing(\"searchTerm\")\r\n                              .ToRanked();\r\n\r\nRankedSearch for a **single search term** within **multiple properties**\r\n\r\n    var result = queryableData.Search(x => x.Property1, x => x.Property2, x => x.Property3)\r\n                              .Containing(\"searchTerm\")\r\n                              .ToRanked();\r\n\r\nRankedSearch for **multiple search terms** within a **single property**\r\n\r\n    var result = queryableData.Search(x => x.Property1)\r\n                              .Containing(\"searchTerm1\", \"searchTerm2\", \"searchTerm3\")\r\n                              .ToRanked();\r\n\r\nRankedSearch for **multiple search terms** within **multiple properties**\r\n\r\n    var result = queryableData.Search(x => x.Property1, x => x.Property2)\r\n                              .Containing(\"searchTerm1\", \"searchTerm2\", \"searchTerm3\")\r\n                              .ToRanked();\r\n\r\n### Retrieve most relevant search results\r\n\r\nUsing ranked search you can now easily order your search results by the most relevant.  This following example assumes we have a list of `User` which has `FirstName`, `LastName` and `MiddleName` string properties. In this example we want to match on those with \"John\" in their name and retrieve the top 10 results.\r\n\r\n    var result = context.Users.Search(x => x.FirstName, x => x.LastName, x.MiddleName)\r\n                              .Containing(\"John\")\r\n                              .ToRanked()\r\n                              .OrderByDescending(r => r.Hits) // Order by Hits property of IRanked<User>\r\n                              .Take(10);\r\n\r\n### Mixing it up\r\n\r\nWe can also mix it up with the other fluent API methods\r\n\r\n    var result = context.Users.Search(x => x.FirstName, x => x.LastName, x => x.MiddleName)\r\n                              .StartsWith(\"john\")\r\n                              .Containing(\"nye\")\r\n                              .ToRanked()\r\n                              .OrderByDescending(r => r.Hits) // Order by Hits property of IRanked<User>\r\n                              .Take(10);\r\n\r\n### A word of note\r\n\r\nBe aware that the `ToRanked()` method uses the search terms of the `Containing()` method combined with the properties to search to build its hit count.  The fluent `ToRanked()` method also means the old `RankedSearch` method is now depreciated.  It still lives in the code but will soon be removed so please update your code to use the fluent api.\r\n\r\n---\r\n\r\nAnd that is it.  If you have any new feature requests, questions, or comments, please get in touch, either, via my [website](http://jnye.co), [twitter](https://twitter.com/ninjanye) or these github pages.\r\n\r\n## Future Features\r\n* Ability to perform AND search on IRanked results\r\n* Soundex support\r\n* Levenshtein support\r\n* Fuzzy search support\r\n* IQueryable implementation improvements (remove null records)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}